@{
    Layout = "_Root";
}
@{
    //current category ID
    var currentCategoryId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }


    //current manufacturer ID
    var currentManufacturerId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }


    //current product ID
    var currentProductId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    }
}




<div class="container">
    @if (IsSectionDefined("Breadcrumb"))
    {
        @section Breadcrumb {
            @RenderSection("Breadcrumb")
        }
    }
    <div class="side-2">
        <!--for octagon slider-->
        <link href="~/Themes/Flexo/Content/css/octagon.css" rel="stylesheet" />


        @if (IsSectionDefined("left"))
        {
            @RenderSection("left")
        }
        else
        {
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnBefore })
            @*@await Component.InvokeAsync("CategoryNavigation", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfterCategoryNavigation })
            @await Component.InvokeAsync("ManufacturerNavigation", new { currentManufacturerId = currentManufacturerId })
            @await Component.InvokeAsync("VendorNavigation")
            @await Component.InvokeAsync("RecentlyViewedProductsBlock", new { productThumbPictureSize = 64 })
            @await Component.InvokeAsync("PopularProductTags")
            @await Component.InvokeAsync("PollBlock", new { systemKeyword = "LeftColumnPoll" })*@




            <!--this is where we're gonna put their "shiny" content.. probably another carousel or something.
        Thinking common links.. especially the book now. Maybe replicate the carousel from the home page with some smaller images..
            something along those lines
        -->

            <!--gonna try the octagon image slider thing here.. embedding links to nav would be ideal-->
            <!--
                SERIOUS CSS LINER NOTES HERE

                tweaking around in the inspector------

                taking off the .master-column-wrapper margin completely helped with a lot of empty space
                .side-2 width 51%
                .center-2 width 49%
                .center-2, .side-2 got rid of the margin overall, and the margin right (though I might have added this messing with stuff)

                all the above "fixes" the current version of the octagon thing.. not sure how it would work on mobile because it DOESNT SEEM RESPONSIVE but I'm not sure about that yet
                
                experiment with the 'clip' and 'polygon' sizes in the octagon css
                -->
            <div class="octagon" id="octagon">
                <img src="~/Themes/Flexo/Content/images/lgstlresizetest.png" />
                <img src="~/Themes/Flexo/Content/images/logo-light.png" />
                <img src="~/Themes/Flexo/Content/images/LogoLong.png" />
                <img src="~/Themes/Flexo/Content/images/LogoStacked.png" />
            </div>


            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfter })
        }
    </div>
    <div class="center-2">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MainColumnBefore })
        @RenderBody()
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MainColumnAfter })
    </div>
</div>

<!--for octagon slider-->
<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
<script src="~/Themes/Flexo/Content/js/jquery.tiles-slider.js"></script>
<script src="~/Themes/Flexo/Content/js/app.js"></script>
